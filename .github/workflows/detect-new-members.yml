name: Detect New Org Members

on:
  schedule:
    - cron: '*/6 * * * *'  # Runs every 6 minutes
  workflow_dispatch:

jobs:
  detect-new-members:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get current org members (including private)
        id: get_members
        run: |
          curl -s -H "Authorization: token ${{ secrets.ORG_PAT }}" \
            https://api.github.com/orgs/DevFlow-Project/members?visibility=all \
            | jq -r '.[].login' | sort > current-members.txt
          echo " Current members:"
          cat current-members.txt

      - name: Load previous member list
        run: |
          if [ -f previous-members.txt ]; then
            sort previous-members.txt > previous.txt
          else
            echo "No previous-members.txt found. Creating empty one."
            touch previous.txt
          fi

      - name: Find new members
        id: compare
        run: |
          comm -13 previous.txt current-members.txt > new-members.txt
          echo "✅ New members detected (if any):"
          cat new-members.txt || echo "(none)"
          if [ -s new-members.txt ]; then
            echo "new_members=$(paste -sd ',' new-members.txt)" >> $GITHUB_OUTPUT
          else
            echo "new_members=" >> $GITHUB_OUTPUT
          fi

      - name: Create issues for new members
        if: steps.compare.outputs.new_members != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const newMembersStr = "${{ steps.compare.outputs.new_members }}";
            const members = newMembersStr.split(',').map(m => m.trim()).filter(Boolean);
            for (const username of members) {
              console.log(` Creating welcome issue for ${username}`);
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: ` New Member Joined: @${username}`,
                body: `Welcome @${username} to **DevFlow-Project**! 🎊\n\nThey’ve just accepted the organization invitation and joined our team.\n\nLet's make sure to help them onboard smoothly! 🤝`,
              });
            }

      - name: Save current member list as previous
        run: |
          mv current-members.txt previous-members.txt

      - name: Commit and push updated member list
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add previous-members.txt
          git diff --cached --quiet || git commit -m "Update member list"
          git push || echo "No changes to push"
